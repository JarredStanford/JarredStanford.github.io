var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import StyledIconButton from './StyledIconButton';
/** A Button with a hover effect, all properties of Button apply<br />
 * `import { IconButton } from 'grommet-controls';`<br />
 * `<IconButton icon='...' />`<br />
 */
var IconButton = function (props) { return (React.createElement(StyledIconButton, __assign({}, props, { hoverIndicator: {
        // @ts-ignore
        dark: {
            color: 'dark-2',
            opacity: '1',
        },
        light: {
            color: 'light-2',
            opacity: '1',
        },
        border: {
            radius: '50%',
        },
    } }))); };
export { IconButton };
